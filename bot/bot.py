import asyncio
import json
import logging
from http.client import responses

import requests
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

with open("config.json", "r") as f:
    config = json.load(f)

BOT_TOKEN = config["BOT_TOKEN"]
ALLOWED_USERS = config["ALLOWED_USERS"]
DJANGO_SERVER = config["DJANGO_SERVER"]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

COLORS = {
    "üî¥ –ö—Ä–æ–≤–∞–≤–∞—è –ú—ç—Ä–∏": (255, 0, 0),
    "üü† –ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —â–µ—Ä–±–µ—Ç": (255, 165, 0),
    "üü° –õ–∏–º–æ–Ω–Ω—ã–π —â–µ—Ä–±–µ—Ç": (255, 255, 0),
    "üü¢ –õ–µ—Å–Ω–∞—è –∑–µ–ª–µ–Ω—å": (0, 255, 0),
    "üü¶ –ú–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑": (0, 191, 255),
    "üîµ –ì–ª—É–±–æ–∫–∏–π –æ–∫–µ–∞–Ω": (0, 0, 255),
    "üü£ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–æ–ª–µ—Ç": (128, 0, 128),
    "üåø –ò–∑—É–º—Ä—É–¥–Ω–∞—è –¥–æ–ª–∏–Ω–∞": (80, 200, 120),
    "üíñ –†–æ–∑–æ–≤—ã–π –∑–∞–∫–∞—Ç": (255, 105, 180),
    "‚ö™ –°–Ω–µ–∂–Ω–∞—è –≤—É–∞–ª—å": (255, 255, 255),
    "üßà –°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ": (255, 239, 100),
}

color_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=color)] for color in COLORS.keys()]
    + [[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí° –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")],
        [
            KeyboardButton(text="üîÜ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å"),
            KeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –ª–∞–º–ø—ã"),
        ],
        [KeyboardButton(text="üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ")],
    ],
    resize_keyboard=True,
)


def is_user_allowed(user_id: int) -> bool:
    return user_id in ALLOWED_USERS


@router.message(Command("start"))
async def start_command(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. ID: {message.from_user.id}")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)


@router.message(F.text == "üí° –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")
async def toggle_light(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_keyboard)
        return

    try:
        response = requests.post(f"{DJANGO_SERVER}/light/toggle/")
        light_status = response.json().get("status")
        await message.answer(f"–°–≤–µ—Ç {light_status}", reply_markup=main_keyboard)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=main_keyboard)


@router.message(F.text == "üîÜ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å")
async def ask_brightness(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_keyboard)
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ (0-100):", reply_markup=main_keyboard)


@router.message(
    lambda message: message.text.isdigit() and 0 <= int(message.text) <= 100
)
async def set_brightness(message: types.Message):
    brightness = int(message.text)
    try:
        response = requests.post(
            f"{DJANGO_SERVER}/light/brightness/", json={"brightness": brightness}
        )
        status = response.json().get("status", "–û—à–∏–±–∫–∞")
        await message.answer(
            f"–Ø—Ä–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {brightness}%", reply_markup=main_keyboard
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=main_keyboard)


@router.message(F.text == "üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –ª–∞–º–ø—ã")
async def show_colors(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_keyboard)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=color_keyboard)


@router.message(lambda message: message.text in COLORS)
async def set_color(message: types.Message):
    r, g, b = COLORS[message.text]
    try:
        response = requests.post(
            f"{DJANGO_SERVER}/light/color/", json={"r": r, "g": g, "b": b}
        )
        status = response.json().get("status", "–û—à–∏–±–∫–∞")
        await message.answer(
            f"–¶–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text} ({r}, {g}, {b})",
            reply_markup=main_keyboard,
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=main_keyboard)


@router.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)


@router.message(F.text == "üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ")
async def take_photo(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_keyboard)
        return
    try:
        response = requests.post(f"{DJANGO_SERVER}/photo/")
        status = response.json().get("status", "–û—à–∏–±–∫–∞")
        await message.answer(f"–ö–∞–º–µ—Ä–∞: {status}", reply_markup=main_keyboard)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=main_keyboard)


async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
