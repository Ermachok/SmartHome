import logging
import requests
import asyncio
import json
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

with open('config.json', 'r') as f:
    config = json.load(f)

TOKEN = config["TOKEN"]
ALLOWED_USERS = config["ALLOWED_USERS"]
DJANGO_SERVER = config["DJANGO_SERVER"]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí° –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")],
        [KeyboardButton(text="üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ")]
    ],
    resize_keyboard=True
)


def is_user_allowed(user_id: int) -> bool:
    return user_id in ALLOWED_USERS


@router.message(Command("start"))
async def start_command(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.{message.from_user.id}")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —É–ø—Ä–∞–≤–ª—è—é –¥–æ–º–æ–º. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.message(lambda message: message.text == "üí° –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")
async def toggle_light(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    try:
        response = requests.post(f"{DJANGO_SERVER}/light/toggle/")
        status = response.json().get("status", "–û—à–∏–±–∫–∞")
        await message.answer(f"–°–≤–µ—Ç: {status}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@router.message(lambda message: message.text == "üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ")
async def take_photo(message: types.Message):
    if not is_user_allowed(message.from_user.id):
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    try:
        response = requests.post(f"{DJANGO_SERVER}/camera/photo/")
        status = response.json().get("status", "–û—à–∏–±–∫–∞")
        await message.answer(f"–ö–∞–º–µ—Ä–∞: {status}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
